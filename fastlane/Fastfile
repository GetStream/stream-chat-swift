default_platform :ios
skip_docs

require 'json'
require 'net/http'
import 'Sonarfile'
import 'Allurefile'

xcode_version = ENV['XCODE_VERSION'] || '14.1'
xcode_project = 'StreamChat.xcodeproj'
github_repo = ENV['GITHUB_REPOSITORY'] || 'GetStream/stream-chat-swift'
stress_tests_cycles = 50

before_all do
  if is_ci
    setup_ci
    xcversion(version: "~> #{xcode_version}")
    ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] = '180'
  end
end

after_all do |lane|
  stop_sinatra if lane == :test_e2e_mock
end

desc "Build .xcframeworks"
lane :build_xcframeworks do
  output_directory = "#{Dir.pwd}/../Products"
  %w[StreamChatUI StreamChat].each do |scheme|
    create_xcframework(
      project: xcode_project,
      scheme: scheme,
      destinations: ['iOS'],
      include_BCSymbolMaps: true,
      include_debug_symbols: true,
      xcframework_output_directory: output_directory,
      remove_xcarchives: true
    )
    sh('../Scripts/removeUnneededSymbols.sh', scheme, output_directory)
  end
end

desc 'Start a new release'
lane :release do |options|
  # Ensure we have a clean git status
  ensure_git_status_clean unless options[:no_ensure_clean]

  # Ensure we have a release type
  UI.user_error!('Please use type parameter with one of the options: type:patch, type:minor, type:major') unless %w[patch minor major].include?(options[:type])

  # Ensure We Have the GITHUB Token
  UI.user_error!('Please set GITHUB_TOKEN environment value. See https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token') if ENV['GITHUB_TOKEN'].nil?

  # Version Number
  version_number = increment_version_number_in_plist(bump_type: options[:type], xcodeproj: xcode_project, target: 'StreamChat')

  UI.user_error!("Tag for version #{version_number} already exists!") if git_tag_exists(tag: version_number)

  # Checkout New Release Branch
  sh("git checkout -b release/#{version_number}")

  # Set version on the SDK & Project
  increment_version_number_in_plist(version_number: version_number, xcodeproj: xcode_project, target: 'StreamChat')
  set_SDK_version(version: version_number)
  increment_version_number_in_plist(version_number: version_number, xcodeproj: xcode_project, target: 'StreamChatUI')

  # Set the framework version on the artifacts
  file = File.read('../StreamChatArtifacts.json')
  data_hash = JSON.parse(file)

  data_hash[version_number.to_s] = "https://github.com/#{github_repo}/releases/download/#{version_number}/StreamChat-All.zip"
  File.write('../StreamChatArtifacts.json', JSON.dump(data_hash))

  changes = touch_changelog(release_version: version_number, github_repo: github_repo)

  # Make sure the podspecs actually build before pushing
  # Disabled now since `StreamChatUI` pod lints it against `StreamChat`s latest version instead of `develop` branch
  # pod_lib_lint(podspec: "StreamChat.podspec", allow_warnings: true)
  # pod_lib_lint(podspec: "StreamChatUI.podspec", allow_warnings: true)

  # Bump Podspec Version
  version_bump_podspec(path: 'StreamChat.podspec', version_number: version_number)
  version_bump_podspec(path: 'StreamChatUI.podspec', version_number: version_number)

  # Bump XCFramework Version
  version_bump_podspec(path: 'StreamChat-XCFramework.podspec', version_number: version_number)
  version_bump_podspec(path: 'StreamChatUI-XCFramework.podspec', version_number: version_number)

  # Stage all changes
  sh('git add -A')

  UI.user_error!('Not committing changes') unless prompt(text: 'Will commit changes. All looking good?', boolean: true)

  sh("git commit -m 'Bump #{version_number}'")

  UI.user_error!('Not pushing changes') unless prompt(text: 'Will push changes. All looking good?', boolean: true)

  push_to_git_remote(tags: false)

  # Open a new PR
  create_pull_request(
    api_token: ENV.fetch('GITHUB_TOKEN', nil),
    repo: github_repo,
    title: "#{version_number} Release",
    head: "release/#{version_number}",
    base: 'main',
    body: changes.to_s
  )

  UI.success("Successfully started release #{version_number}")
end

desc 'Completes an SDK Release'
lane :publish_release do |options|
  version = options[:version] || ''
  UI.user_error!('You need to pass the version of the release') unless version.length > 0

  # Create XCFrameworks
  xcversion(version: xcode_version)
  sh('cd .. && make frameworks')

  changes = read_changelog(version: version)

  # Create Github Release
  github_release = set_github_release(
    repository_name: github_repo,
    api_token: ENV.fetch('GITHUB_TOKEN', nil),
    name: version,
    tag_name: version,
    commitish: 'main',
    description: changes,
    upload_assets: ['Products/StreamChat.zip', 'Products/StreamChatUI.zip', 'Products/StreamChat-All.zip']
  )

  spm_github_release_url = update_spm(version: version)

  ['StreamChat.podspec', 'StreamChat-XCFramework.podspec', 'StreamChatUI.podspec', 'StreamChatUI-XCFramework.podspec'].each do |podspec|
    pod_push_safely(podspec: podspec, sync: options[:sync] & true)
  end

  # TODO: Update stream-chat-swift-integration-apps

  UI.success("🎉🎉🎉🎉🎉🎉 Github releases successfully created:\n 👉 stream-chat-swift: #{github_release['html_url']}\n👉 stream-chat-swift-spm: #{spm_github_release_url}")
end

desc 'Update XCFrameworks and submit to the SPM repository'
private_lane :update_spm do |options|
  version = options[:version] || ''
  UI.user_error!('You need to pass the version of the release you want to obtain the changelog from') unless version.length > 0

  # Generate Checksums
  stream_chat_checksum = sh('swift package compute-checksum ../Products/StreamChat.zip').strip
  stream_chat_ui_checksum = sh('swift package compute-checksum ../Products/StreamChatUI.zip').strip

  initial_directory = Dir.pwd

  # Update SPM Repo
  spm_directory_name = 'StreamSPM'
  spm_directory = "../../#{spm_directory_name}"
  sh("git clone git@github.com:#{github_repo}-spm.git ../../#{spm_directory_name}")
  Dir.chdir(spm_directory)

  result = sh('basename `git rev-parse --show-toplevel`').strip
  UI.error("Not using #{spm_directory_name} repo") unless result.to_s == spm_directory_name

  file_lines = File.readlines('Package.swift')
  file_data = ''
  previous_module = ''

  file_lines.each do |line|
    formatted_line =
      case previous_module
      when 'StreamChat'
        line.gsub(/(checksum: ")[a-z0-9]+(")/, "\\1#{stream_chat_checksum}\\2")
      when "StreamChatUI"
        line.gsub(/(checksum: ")[a-z0-9]+(")/, "\\1#{stream_chat_ui_checksum}\\2")
      else
        line
      end

    url_pattern = %r{(releases/download/)[.0-9]+(/)}
    if line.match(url_pattern)
      formatted_line = line.gsub(url_pattern, "\\1#{version}\\2")
      previous_module = line.match(/([a-zA-Z]+).zip/).to_s.gsub(/.zip/, '')
    end

    file_data << formatted_line
  end

  # Write the new changes
  File.open('./Package.swift', 'w') { |file| file << file_data }

  # Update the repo
  sh('git add -A')
  sh("git commit -m 'Bump #{version}'")
  sh('git push')

  github_release = set_github_release(
    repository_name: "#{github_repo}-spm",
    api_token: ENV.fetch('GITHUB_TOKEN', nil),
    name: version,
    tag_name: version,
    commitish: 'main',
    description: "https://github.com/#{github_repo}/releases/tag/#{version}"
  )

  UI.message("Moving back to fastlane's directory - #{initial_directory}")
  Dir.chdir(initial_directory)

  # Clean Up
  sh("rm -rf #{spm_directory}")
  UI.success("New SPM release available: #{github_release['html_url']}")
  github_release['html_url']
end

lane :set_SDK_version do |options|
  path_to_version_file = '../Sources/StreamChat/Generated/SystemEnvironment+Version.swift'
  version_generated_file = "//
// Copyright © 2022 Stream.io Inc. All rights reserved.
//
// ⚠️  Generated file, please use `fastlane :bump_SDK_version or fastlane release major|minor|patch` lanes

import Foundation

extension SystemEnvironment {
  /// A Stream Chat version.
  public static let version: String = \"#{options[:version]}\"
}
"
  File.write(path_to_version_file, version_generated_file)
end

private_lane :appstore_api_key do
  @appstore_api_key ||= app_store_connect_api_key(
    key_id: 'MT3PRT8TB7',
    issuer_id: '69a6de96-0738-47e3-e053-5b8c7c11a4d1',
    key_content: ENV.fetch('APPSTORE_API_KEY', nil),
    in_house: false
  )
end

desc "If `readonly: true` (by default), installs all Certs and Profiles necessary for development and ad-hoc.\nIf `readonly: false`, recreates all Profiles necessary for development and ad-hoc, updates them locally and remotely."
lane :match_me do |options|
  app_identifiers = [
    'io.getstream.StreamChat',
    'io.getstream.iOS.ChatDemoApp',
    'io.getstream.iOS.ChatDemoAppTwo',
    'io.getstream.iOS.ChatDemoApp.DemoAppPush',
    'io.getstream.iOS.iMessageClone',
    'io.getstream.iOS.SlackClone',
    'io.getstream.iOS.MessengerClone',
    'io.getstream.iOS.YouTubeClone',
    'io.getstream.iOS.DemoAppSwiftUI'
  ]
  custom_match(
    api_key: appstore_api_key,
    app_identifier: app_identifiers,
    readonly: options[:readonly],
    register_device: options[:register_device]
  )
end

desc 'Builds the latest version of Demo app and uploads it to TestFlight'
lane :uikit_testflight_build do
  match_me
  testflight_build(
    api_key: appstore_api_key,
    xcode_project: xcode_project,
    sdk_target: 'StreamChat',
    app_target: 'DemoApp',
    app_identifier: 'io.getstream.iOS.ChatDemoApp'
  )
end

desc 'Get next PR number from github to be used in CHANGELOG'
lane :get_next_issue_number do
  result = github_api(api_token: ENV.fetch('FASTLANE_GITHUB_TOKEN', nil), path: "/repos/#{github_repo}/issues")

  next_issue_number = result[:json][0]['number'] + 1
  next_issue_link = "[##{next_issue_number}](https://github.com/#{github_repo}/issues/#{next_issue_number})"

  clipboard(value: next_issue_link)

  UI.success("The next PR / Issue will have number: #{next_issue_number}")
  UI.success("So the next markdown link is: #{next_issue_link}")
  UI.success('Next markdown link is copied to your clipboard! ⬆️')
end

desc 'Runs tests in Debug config'
lane :test do |options|
  next unless is_check_required(sources: sources_matrix[:unit])

  update_testplan_on_ci(path: 'Tests/StreamChatTests/StreamChatFlakyTests.xctestplan')

  scan(
    project: xcode_project,
    scheme: 'StreamChat',
    testplan: 'StreamChatFlakyTests',
    clean: true,
    devices: options[:device],
    build_for_testing: options[:build_for_testing],
    number_of_retries: 5
  )

  next if options[:build_for_testing]

  update_testplan_on_ci(path: 'Tests/StreamChatTests/StreamChatTestPlan.xctestplan')

  scan(
    project: xcode_project,
    scheme: 'StreamChat',
    testplan: 'StreamChatTestPlan',
    devices: options[:device],
    skip_build: true
  )
end

desc 'Starts Sinatra web server'
lane :start_sinatra do
  sh('nohup bundle exec ruby sinatra.rb > sinatra_log.txt 2>&1 &')
end

desc 'Stops Sinatra web server'
lane :stop_sinatra do
  sh('lsof -t -i:4567 | xargs kill -9')
end

desc 'Runs e2e ui tests using mock server in Debug config'
lane :test_e2e_mock do |options|
  next unless is_check_required(sources: sources_matrix[:e2e])

  start_sinatra

  update_testplan_on_ci(path: 'StreamChatUITestsAppUITests/StreamChatUITestsApp.xctestplan')

  ios = options[:ios]
  device = ios && ios != 'latest' ? "#{options[:device]} (#{ios})" : options[:device]
  build_for_testing = is_ci && options[:cron].nil?

  scan_options = {
    project: xcode_project,
    scheme: 'StreamChatUITestsApp',
    testplan: 'StreamChatUITestsApp',
    result_bundle: true,
    devices: device,
    number_of_retries: 3 # TODO: CIS-1737
  }
  scan(scan_options.merge(clean: true, build_for_testing: build_for_testing))

  if build_for_testing
    parallelize_tests_on_ci(
      scan: scan_options,
      derived_data: lane_context[SharedValues::SCAN_DERIVED_DATA_PATH],
      batch: options[:batch]
    )
  end
end

private_lane :parallelize_tests_on_ci do |options|
  xctestrun = Dir.glob("#{options[:derived_data]}/Build/Products/*.xctestrun").first
  tests = retrieve_xctest_names(xctestrun: xctestrun).values.flatten
  slice_size = (tests.size / ENV['MATRIX_SIZE'].to_f).ceil
  only_testing = []
  tests.each_slice(slice_size) { |test| only_testing << test }
  only_testing_batch = only_testing[options[:batch].to_i]

  UI.success("Tests in total: #{only_testing.flatten.size}. Running #{only_testing_batch.size} of them ⌛️")
  scan(
    options[:scan].merge(
      test_without_building: true,
      derived_data_path: options[:derived_data],
      only_testing: only_testing_batch
    )
  )
end

desc 'Runs ui tests in Debug config'
lane :test_ui do |options|
  next unless is_check_required(sources: sources_matrix[:ui])

  remove_snapshots if options[:record]

  update_testplan_on_ci(path: 'Tests/StreamChatUITests/StreamChatUITestPlan.xctestplan')

  scan(
    project: xcode_project,
    scheme: 'StreamChatUI',
    testplan: 'StreamChatUITestPlan',
    clean: true,
    result_bundle: true,
    devices: options[:device],
    build_for_testing: options[:build_for_testing]
  )
end

desc 'Runs ui tests in Release config'
lane :test_ui_release do |options|
  update_testplan_on_ci(path: 'Tests/StreamChatUITests/StreamChatUITestPlan.xctestplan')

  scan(
    project: xcode_project,
    scheme: 'StreamChatUI',
    testplan: 'StreamChatUITestPlan',
    configuration: 'ReleaseTests',
    clean: true,
    devices: options[:device]
  )
end

desc 'Runs tests in Release config'
lane :test_release do |options|
  update_testplan_on_ci(path: 'Tests/StreamChatTests/StreamChatTestPlan.xctestplan')

  scan(
    project: xcode_project,
    scheme: 'StreamChat',
    testplan: 'StreamChatTestPlan',
    configuration: 'ReleaseTests',
    clean: true,
    devices: options[:device]
  )
end

desc 'Runs tests in Release config on macOS'
lane :test_release_macos do
  update_testplan_on_ci(path: 'Tests/StreamChatTests/StreamChatTestPlan.xctestplan')

  match_macos

  scan(
    project: xcode_project,
    scheme: 'StreamChat',
    testplan: 'StreamChatTestPlan',
    configuration: 'ReleaseTests',
    clean: true,
    disable_xcpretty: true,
    destination: 'platform=macOS,arch=x86_64' # will select first from macOS and macOS Catalyst. Let's hope it always will be macOS
  )
end

desc 'Runs tests in Debug config on macOS'
lane :test_debug_macos do
  update_testplan_on_ci(path: 'Tests/StreamChatTests/StreamChatTestPlan.xctestplan')

  match_macos

  scan(
    project: xcode_project,
    scheme: 'StreamChat',
    testplan: 'StreamChatTestPlan',
    clean: true,
    disable_xcpretty: true,
    destination: 'platform=macOS,arch=x86_64' # will select first from macOS and macOS Catalyst. Let's hope it always will be macOS
  )
end

private_lane :match_macos do
  %w[development appstore].each do |type|
    match(
      type: type,
      app_identifier: 'io.getstream.StreamChat',
      platform: 'macos'
    )
  end
end

desc 'Runs stress tests for Debug config'
lane :stress_test do
  scan(
    project: xcode_project,
    scheme: 'StreamChat',
    clean: true,
    build_for_testing: true,
    devices: options[:device]
  )

  update_testplan_on_ci(path: 'Tests/StreamChatTests/StreamChatStressTestPlan.xctestplan')

  stress_tests_cycles.times do
    scan(
      project: xcode_project,
      scheme: 'StreamChat',
      test_without_building: true,
      testplan: 'StreamChatStressTestPlan',
      devices: options[:device],
      xcpretty_args: '--test' # simplify logs
    )
  end
end

desc 'Runs stress tests in Release config'
lane :stress_test_release do |options|
  scan(
    project: xcode_project,
    scheme: 'StreamChat',
    configuration: 'ReleaseTests',
    clean: true,
    build_for_testing: true,
    devices: options[:device]
  )

  update_testplan_on_ci(path: 'Tests/StreamChatTests/StreamChatStressTestPlan.xctestplan')

  stress_tests_cycles.times do
    scan(
      project: xcode_project,
      scheme: 'StreamChat',
      configuration: 'ReleaseTests',
      test_without_building: true,
      testplan: 'StreamChatStressTestPlan',
      devices: options[:device],
      xcpretty_args: '--test' # simplify logs
    )
  end
end

desc 'Builds Sample app'
lane :build_sample do |options|
  options[:scheme] = 'StreamChatSample'
  build_example_app(options)
end

desc 'Builds Demo app'
lane :build_demo do |options|
  options[:scheme] = 'DemoApp'
  build_example_app(options)
end

desc 'Builds iMessageClone app'
lane :build_imessage_clone do |options|
  options[:scheme] = 'iMessage'
  build_example_app(options)
end

desc 'Builds SlackClone app'
lane :build_slack_clone do |options|
  options[:scheme] = 'Slack'
  build_example_app(options)
end

desc 'Builds MessengerClone app'
lane :build_messenger_clone do |options|
  options[:scheme] = 'Messenger'
  build_example_app(options)
end

desc 'Builds YouTubeClone app'
lane :build_youtube_clone do |options|
  options[:scheme] = 'YouTube'
  build_example_app(options)
end

private_lane :build_example_app do |options|
  next unless is_check_required(sources: sources_matrix[:sample_apps])

  scan(
    project: xcode_project,
    scheme: options[:scheme],
    clean: true,
    build_for_testing: true,
    devices: options[:device]
  )
end

desc 'Test SPM Integration'
lane :spm_integration do
  next unless is_check_required(sources: sources_matrix[:integration])

  build_app(
    project: 'Integration/SPM/SwiftPackageManager.xcodeproj',
    scheme: 'SwiftPackageManager',
    skip_package_ipa: true,
    skip_archive: true,
    destination: 'generic/platform=iOS Simulator'
  )
end

desc 'Test CocoaPods Integration'
lane :cocoapods_integration do
  next unless is_check_required(sources: sources_matrix[:integration])

  cocoapods(
    clean_install: true,
    podfile: 'Integration/CocoaPods/'
  )

  build_app(
    workspace: 'Integration/CocoaPods/CocoaPods.xcworkspace',
    scheme: 'CocoaPods',
    skip_package_ipa: true,
    skip_archive: true,
    clean: true,
    destination: 'generic/platform=iOS Simulator'
  )
end

desc 'Build and upload DemoApp to Emerge'
lane :emerge_upload do
  next unless is_check_required(sources: sources_matrix[:emerge])

  gym(
    export_method: 'ad-hoc',
    project: xcode_project,
    scheme: 'DemoApp',
    skip_package_ipa: true,
    skip_archive: false,
    clean: true
  )

  emerge(
    build_type: 'release',
    repo_name: github_repo,
    pr_number: ENV.fetch('GITHUB_PR_NUM', nil), # If `nil` then local run or merge to main
    sha: ENV['GITHUB_COMMIT_SHA'] || ENV['GITHUB_SHA'] || last_git_commit[:commit_hash]
  )
end

private_lane :update_testplan_on_ci do |options|
  update_testplan(path: options[:path], env_vars: { key: 'CI', value: 'TRUE' }) if is_ci
end

desc 'Run fastlane linting'
lane :rubocop do
  next unless is_check_required(sources: sources_matrix[:ruby])

  sh('bundle exec rubocop')
end

desc 'Remove UI snapshots'
private_lane :remove_snapshots do
  Dir.glob("../Tests/StreamChatUITests/**/__Snapshots__/**/*.png").select { |file| File.delete(file) }
end

lane :sources_matrix do
  {
    e2e: ['Sources', 'StreamChatUITestsAppUITests', 'StreamChatUITestsApp'],
    unit: ['Sources', 'Tests', xcode_project],
    ui: ['Sources', 'Tests/StreamChatUITests', xcode_project],
    emerge: ['Sources'],
    sample_apps: ['Sources', 'Examples', 'DemoApp', 'StreamChatSample', xcode_project],
    integration: ['Sources', 'Integration', xcode_project],
    ruby: ['fastlane']
  }
end

private_lane :current_branch do
  ENV['BRANCH_NAME'] || git_branch
end
