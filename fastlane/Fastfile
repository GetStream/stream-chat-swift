default_platform :ios
skip_docs

require 'json'
require 'net/http'
import 'Sonarfile'
import 'Allurefile'

xcode_version = ENV['XCODE_VERSION'] || '14.3.1'
xcode_project = 'StreamChat.xcodeproj'
sdk_names = ['StreamChat', 'StreamChatUI']
github_repo = ENV['GITHUB_REPOSITORY'] || 'GetStream/stream-chat-swift'
stress_tests_cycles = 50

before_all do |lane|
  if is_ci
    setup_ci
    ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] = '180'
    xcodes(version: xcode_version, select_for_current_build_only: true) unless [:publish_release, :allure_launch].include?(lane)
  end
end

after_all do |lane|
  stop_sinatra if lane == :test_e2e_mock
end

desc "Build .xcframeworks"
lane :build_xcframeworks do
  output_directory = "#{Dir.pwd}/../Products"
  %w[StreamChatUI StreamChat].each do |scheme|
    create_xcframework(
      project: xcode_project,
      scheme: scheme,
      destinations: ['iOS'],
      include_BCSymbolMaps: true,
      include_debug_symbols: true,
      xcframework_output_directory: output_directory,
      remove_xcarchives: true
    )
    sh('../Scripts/removeUnneededSymbols.sh', scheme, output_directory)
  end
end

desc 'Start a new release'
lane :release do |options|
  previous_version_number = last_git_tag
  artifacts_path = File.absolute_path('../StreamChatArtifacts.json')
  swift_environment_path = File.absolute_path('../Sources/StreamChat/Generated/SystemEnvironment+Version.swift')
  extra_changes = lambda do |release_version|
    # Set the framework version on the artifacts
    artifacts = JSON.parse(File.read(artifacts_path))
    artifacts[release_version.to_s] = "https://github.com/#{github_repo}/releases/download/#{release_version}/StreamChat-All.zip"
    File.write(artifacts_path, JSON.dump(artifacts))

    # Set the framework version in SystemEnvironment+Version.swift
    new_content = File.read(swift_environment_path).gsub!(previous_version_number, release_version)
    File.open(swift_environment_path, 'w') { |f| f.puts(new_content) }
  end

  pod_lint
  release_ios_sdk(
    version: options[:version],
    bump_type: options[:type],
    sdk_names: sdk_names,
    podspec_names: ['StreamChat', 'StreamChat-XCFramework', 'StreamChatUI', 'StreamChatUI-XCFramework'],
    github_repo: github_repo,
    extra_changes: extra_changes,
    create_pull_request: true
  )
end

desc 'Completes an SDK Release'
lane :publish_release do |options|
  # Create XCFrameworks
  xcversion(version: '13.0')
  clean_products
  build_xcframeworks
  compress_frameworks
  clean_products

  publish_ios_sdk(
    version: options[:version],
    sdk_names: sdk_names,
    podspec_names: ['StreamChat', 'StreamChat-XCFramework', 'StreamChatUI', 'StreamChatUI-XCFramework'],
    github_repo: github_repo,
    upload_assets: ['Products/StreamChat.zip', 'Products/StreamChatUI.zip', 'Products/StreamChat-All.zip']
  )

  update_spm(version: options[:version])
end

lane :merge_release_to_main do
  ensure_git_status_clean
  sh('git checkout main')
  sh('git pull')

  # Grep all remote release branches and ensure there's only one
  release_branches = sh(command: 'git branch -a', log: false).delete(' ').split("\n").grep(%r(origin/.*release/))
  UI.user_error!("Expected 1 release branch, found #{release_branches.size}") if release_branches.size != 1

  # Merge release branch to main. For more info, read: https://notion.so/iOS-Branching-Strategy-37c10127dc26493e937769d44b1d6d9a
  sh("git merge #{release_branches.first} --ff-only")
  UI.user_error!('Not pushing changes') unless prompt(text: 'Will push changes. All looking good?', boolean: true)
  sh('git push')
  UI.important('Please, wait for the `Publish new release` workflow to pass on GitHub Actions: ' \
               "https://github.com/#{github_repo}/actions/workflows/publish-release.yml")
end

lane :merge_main_to_develop do
  ensure_git_status_clean
  sh('git checkout develop')
  sh('git pull')
  sh('git merge main')
  UI.user_error!('Not pushing changes') unless prompt(text: 'Will push changes. All looking good?', boolean: true)
  sh('git push')
end

desc 'Compresses the XCFrameworks into zip files'
lane :compress_frameworks do
  Dir.chdir('..') do
    FileUtils.cp('LICENSE', 'Products/LICENSE')
    Dir.chdir('Products') do
      ['StreamChat', 'StreamChatUI'].each do |framework|
        sh("zip -r #{framework} ./#{framework}.xcframework ./LICENSE")
        sh("swift package compute-checksum #{framework}.zip")
      end
      sh('zip -r "StreamChat-All" ./*.xcframework ./LICENSE')
    end
  end
end

desc 'Cleans Products and DerivedData folders'
lane :clean_products do
  Dir.chdir('..') do
    ['*.xcframework', '*.bundle', '*.BCSymbolMaps', '*.dSYMs', 'LICENSE'].each do |f|
      sh("rm -rf Products/#{f}") # FileUtils.rm_rf does not work from Makefile, using sh instead
    end
  end
end

desc 'Update XCFrameworks and submit to the SPM repository'
private_lane :update_spm do |options|
  version = options[:version] || ''
  UI.user_error!('You need to pass the version of the release you want to obtain the changelog from') unless version.length > 0

  # Generate Checksums
  stream_chat_checksum = sh('swift package compute-checksum ../Products/StreamChat.zip').strip
  stream_chat_ui_checksum = sh('swift package compute-checksum ../Products/StreamChatUI.zip').strip

  initial_directory = Dir.pwd

  # Update SPM Repo
  spm_directory_name = 'StreamSPM'
  spm_directory = "../../#{spm_directory_name}"
  sh("git clone git@github.com:#{github_repo}-spm.git ../../#{spm_directory_name}")
  Dir.chdir(spm_directory)

  result = sh('basename `git rev-parse --show-toplevel`').strip
  UI.error("Not using #{spm_directory_name} repo") unless result.to_s == spm_directory_name

  file_lines = File.readlines('Package.swift')
  file_data = ''
  previous_module = ''

  file_lines.each do |line|
    formatted_line =
      case previous_module
      when 'StreamChat'
        line.gsub(/(checksum: ")[a-z0-9]+(")/, "\\1#{stream_chat_checksum}\\2")
      when "StreamChatUI"
        line.gsub(/(checksum: ")[a-z0-9]+(")/, "\\1#{stream_chat_ui_checksum}\\2")
      else
        line
      end

    url_pattern = %r{(releases/download/)[.0-9]+(/)}
    if line.match(url_pattern)
      formatted_line = line.gsub(url_pattern, "\\1#{version}\\2")
      previous_module = line.match(/([a-zA-Z]+).zip/).to_s.gsub(/.zip/, '')
    end

    file_data << formatted_line
  end

  # Write the new changes
  File.open('./Package.swift', 'w') { |file| file << file_data }

  # Update the repo
  sh('git add -A')
  sh("git commit -m 'Bump #{version}'")
  sh('git push')

  github_release = set_github_release(
    repository_name: "#{github_repo}-spm",
    api_token: ENV.fetch('GITHUB_TOKEN', nil),
    name: version,
    tag_name: version,
    commitish: 'main',
    description: "https://github.com/#{github_repo}/releases/tag/#{version}"
  )

  UI.message("Moving back to fastlane's directory - #{initial_directory}")
  Dir.chdir(initial_directory)

  # Clean Up
  sh("rm -rf #{spm_directory}")
  UI.success("New SPM release available: #{github_release['html_url']}")
  github_release['html_url']
end

private_lane :appstore_api_key do
  @appstore_api_key ||= app_store_connect_api_key(
    key_id: 'MT3PRT8TB7',
    issuer_id: '69a6de96-0738-47e3-e053-5b8c7c11a4d1',
    key_content: ENV.fetch('APPSTORE_API_KEY', nil),
    in_house: false
  )
end

lane :pod_lint do
  # We don't lint StreamChatUI.podspec since pod lints it against StreamChat's remote version instead of local one
  pod_lib_lint(podspec: 'StreamChat.podspec', allow_warnings: true)
end

desc "If `readonly: true` (by default), installs all Certs and Profiles necessary for development and ad-hoc.\nIf `readonly: false`, recreates all Profiles necessary for development and ad-hoc, updates them locally and remotely."
lane :match_me do |options|
  app_identifiers = [
    'io.getstream.StreamChat',
    'io.getstream.iOS.ChatDemoApp',
    'io.getstream.iOS.ChatDemoAppTwo',
    'io.getstream.iOS.ChatDemoApp.DemoAppPush',
    'io.getstream.iOS.iMessageClone',
    'io.getstream.iOS.SlackClone',
    'io.getstream.iOS.MessengerClone',
    'io.getstream.iOS.YouTubeClone',
    'io.getstream.iOS.DemoAppSwiftUI',
    'io.getstream.iOS.VideoDemoApp',
    'io.getstream.iOS.DemoAppUIKit'
  ]
  custom_match(
    api_key: appstore_api_key,
    app_identifier: app_identifiers,
    readonly: options[:readonly],
    register_device: options[:register_device]
  )
end

desc 'Builds the latest version of Demo app and uploads it to TestFlight'
lane :uikit_testflight_build do
  match_me
  testflight_build(
    api_key: appstore_api_key,
    xcode_project: xcode_project,
    sdk_target: 'StreamChat',
    app_target: 'DemoApp',
    app_identifier: 'io.getstream.iOS.ChatDemoApp'
  )
end

desc 'Get next PR number from github to be used in CHANGELOG'
lane :get_next_issue_number do
  result = github_api(api_token: ENV.fetch('FASTLANE_GITHUB_TOKEN', nil), path: "/repos/#{github_repo}/issues")

  next_issue_number = result[:json][0]['number'] + 1
  next_issue_link = "[##{next_issue_number}](https://github.com/#{github_repo}/issues/#{next_issue_number})"

  clipboard(value: next_issue_link)

  UI.success("The next PR / Issue will have number: #{next_issue_number}")
  UI.success("So the next markdown link is: #{next_issue_link}")
  UI.success('Next markdown link is copied to your clipboard! ⬆️')
end

desc 'Runs tests in Debug config'
lane :test do |options|
  next unless is_check_required(sources: sources_matrix[:unit])

  update_testplan_on_ci(path: 'Tests/StreamChatTests/StreamChatFlakyTests.xctestplan')

  scan(
    project: xcode_project,
    scheme: 'StreamChat',
    testplan: 'StreamChatFlakyTests',
    clean: true,
    devices: options[:device],
    build_for_testing: options[:build_for_testing],
    number_of_retries: 5
  )

  next if options[:build_for_testing]

  update_testplan_on_ci(path: 'Tests/StreamChatTests/StreamChatTestPlan.xctestplan')

  scan(
    project: xcode_project,
    scheme: 'StreamChat',
    testplan: 'StreamChatTestPlan',
    devices: options[:device],
    skip_build: true
  )
end

desc 'Starts Sinatra web server'
lane :start_sinatra do
  sh('bundle exec ruby sinatra.rb > sinatra_log.txt 2>&1 &')
end

desc 'Stops Sinatra web server'
lane :stop_sinatra do
  sh('lsof -t -i:4567 | xargs kill -9')
end

desc 'Runs e2e ui tests using mock server in Debug config'
lane :test_e2e_mock do |options|
  next unless is_check_required(sources: sources_matrix[:e2e])

  start_sinatra

  device = options[:ios] ? "#{options[:device]} (#{options[:ios]})" : options[:device]
  prepare_simulator(device: device) if is_ci

  scan_options = {
    project: xcode_project,
    scheme: 'StreamChatUITestsApp',
    testplan: 'StreamChatUITestsApp',
    result_bundle: true,
    devices: device,
    number_of_retries: 3 # TODO: CIS-1737
  }

  build_for_testing = is_ci && options[:cron].nil?
  scan(scan_options.merge(clean: true, build_for_testing: build_for_testing))

  if build_for_testing
    parallelize_tests_on_ci(
      scan: scan_options,
      derived_data: lane_context[SharedValues::SCAN_DERIVED_DATA_PATH],
      batch: options[:batch]
    )
  end
end

private_lane :parallelize_tests_on_ci do |options|
  xctestrun = Dir.glob("#{options[:derived_data]}/Build/Products/*.xctestrun").first
  tests = retrieve_xctest_names(xctestrun: xctestrun).values.flatten
  slice_size = (tests.size / ENV['MATRIX_SIZE'].to_f).ceil
  only_testing = []
  tests.each_slice(slice_size) { |test| only_testing << test }
  only_testing_batch = only_testing[options[:batch].to_i]

  UI.success("Tests in total: #{only_testing.flatten.size}. Running #{only_testing_batch.size} of them ⌛️")
  scan(
    options[:scan].merge(
      test_without_building: true,
      derived_data_path: options[:derived_data],
      only_testing: only_testing_batch
    )
  )
end

desc 'Runs ui tests in Debug config'
lane :test_ui do |options|
  next unless is_check_required(sources: sources_matrix[:ui])

  remove_snapshots if options[:record]

  update_testplan_on_ci(path: 'Tests/StreamChatUITests/StreamChatUITestPlan.xctestplan')

  scan(
    project: xcode_project,
    scheme: 'StreamChatUI',
    testplan: 'StreamChatUITestPlan',
    clean: true,
    result_bundle: true,
    devices: options[:device],
    build_for_testing: options[:build_for_testing]
  )
end

desc 'Runs ui tests in Release config'
lane :test_ui_release do |options|
  update_testplan_on_ci(path: 'Tests/StreamChatUITests/StreamChatUITestPlan.xctestplan')

  scan(
    project: xcode_project,
    scheme: 'StreamChatUI',
    testplan: 'StreamChatUITestPlan',
    configuration: 'ReleaseTests',
    clean: true,
    devices: options[:device]
  )
end

desc 'Runs tests in Release config'
lane :test_release do |options|
  update_testplan_on_ci(path: 'Tests/StreamChatTests/StreamChatTestPlan.xctestplan')

  scan(
    project: xcode_project,
    scheme: 'StreamChat',
    testplan: 'StreamChatTestPlan',
    configuration: 'ReleaseTests',
    clean: true,
    devices: options[:device]
  )
end

desc 'Runs tests in Release config on macOS'
lane :test_release_macos do
  update_testplan_on_ci(path: 'Tests/StreamChatTests/StreamChatTestPlan.xctestplan')

  match_macos

  scan(
    project: xcode_project,
    scheme: 'StreamChat',
    testplan: 'StreamChatTestPlan',
    configuration: 'ReleaseTests',
    clean: true,
    disable_xcpretty: true,
    destination: 'platform=macOS,arch=x86_64' # will select first from macOS and macOS Catalyst. Let's hope it always will be macOS
  )
end

desc 'Runs tests in Debug config on macOS'
lane :test_debug_macos do
  update_testplan_on_ci(path: 'Tests/StreamChatTests/StreamChatTestPlan.xctestplan')

  match_macos

  scan(
    project: xcode_project,
    scheme: 'StreamChat',
    testplan: 'StreamChatTestPlan',
    clean: true,
    disable_xcpretty: true,
    destination: 'platform=macOS,arch=x86_64' # will select first from macOS and macOS Catalyst. Let's hope it always will be macOS
  )
end

private_lane :match_macos do
  %w[development appstore].each do |type|
    match(
      type: type,
      app_identifier: 'io.getstream.StreamChat',
      platform: 'macos'
    )
  end
end

desc 'Runs stress tests for Debug config'
lane :stress_test do
  scan(
    project: xcode_project,
    scheme: 'StreamChat',
    clean: true,
    build_for_testing: true,
    devices: options[:device]
  )

  update_testplan_on_ci(path: 'Tests/StreamChatTests/StreamChatStressTestPlan.xctestplan')

  stress_tests_cycles.times do
    scan(
      project: xcode_project,
      scheme: 'StreamChat',
      test_without_building: true,
      testplan: 'StreamChatStressTestPlan',
      devices: options[:device],
      xcpretty_args: '--test' # simplify logs
    )
  end
end

desc 'Runs stress tests in Release config'
lane :stress_test_release do |options|
  scan(
    project: xcode_project,
    scheme: 'StreamChat',
    configuration: 'ReleaseTests',
    clean: true,
    build_for_testing: true,
    devices: options[:device]
  )

  update_testplan_on_ci(path: 'Tests/StreamChatTests/StreamChatStressTestPlan.xctestplan')

  stress_tests_cycles.times do
    scan(
      project: xcode_project,
      scheme: 'StreamChat',
      configuration: 'ReleaseTests',
      test_without_building: true,
      testplan: 'StreamChatStressTestPlan',
      devices: options[:device],
      xcpretty_args: '--test' # simplify logs
    )
  end
end

desc 'Builds Demo app'
lane :build_demo do |options|
  options[:scheme] = 'DemoApp'
  build_example_app(options)
end

desc 'Builds iMessageClone app'
lane :build_imessage_clone do |options|
  options[:scheme] = 'iMessage'
  build_example_app(options)
end

desc 'Builds SlackClone app'
lane :build_slack_clone do |options|
  options[:scheme] = 'Slack'
  build_example_app(options)
end

desc 'Builds MessengerClone app'
lane :build_messenger_clone do |options|
  options[:scheme] = 'Messenger'
  build_example_app(options)
end

desc 'Builds YouTubeClone app'
lane :build_youtube_clone do |options|
  options[:scheme] = 'YouTube'
  build_example_app(options)
end

private_lane :build_example_app do |options|
  next unless is_check_required(sources: sources_matrix[:sample_apps])

  scan(
    project: xcode_project,
    scheme: options[:scheme],
    clean: true,
    build_for_testing: true,
    devices: options[:device]
  )
end

desc 'Test SPM Integration'
lane :spm_integration do
  next unless is_check_required(sources: sources_matrix[:integration])

  build_app(
    project: 'Integration/SPM/SwiftPackageManager.xcodeproj',
    scheme: 'SwiftPackageManager',
    skip_package_ipa: true,
    skip_archive: true,
    destination: 'generic/platform=iOS Simulator'
  )
end

desc 'Test CocoaPods Integration'
lane :cocoapods_integration do
  next unless is_check_required(sources: sources_matrix[:integration])

  cocoapods(
    clean_install: true,
    podfile: 'Integration/CocoaPods/'
  )

  build_app(
    workspace: 'Integration/CocoaPods/CocoaPods.xcworkspace',
    scheme: 'CocoaPods',
    skip_package_ipa: true,
    skip_archive: true,
    clean: true,
    destination: 'generic/platform=iOS Simulator'
  )
end

desc 'Build and upload DemoApp to Emerge'
lane :emerge_upload do
  next unless is_check_required(sources: sources_matrix[:emerge])

  gym(
    export_method: 'ad-hoc',
    project: xcode_project,
    scheme: 'DemoApp',
    skip_package_ipa: true,
    skip_archive: false,
    clean: true
  )

  emerge(
    build_type: 'release',
    repo_name: github_repo,
    pr_number: ENV['GITHUB_PR_NUM'] || nil, # If `nil` then local run or merge to develop/main
    sha: last_git_commit[:commit_hash]
  )
end

private_lane :update_testplan_on_ci do |options|
  update_testplan(path: options[:path], env_vars: { key: 'CI', value: 'TRUE' }) if is_ci
end

lane :sync_mock_server do
  sh('python3 sync_mock_server.py')
  next unless is_ci

  branch_name = "ci/sync-mock-server-#{Time.now.to_i}"
  commit_message = '[CI] Sync Mock Server'
  sh("git checkout -b #{branch_name}")
  sh('git add -A')
  sh("git commit -m '#{commit_message}'")
  push_to_git_remote(tags: false)

  create_pull_request(
    api_token: ENV.fetch('GITHUB_TOKEN', nil),
    repo: github_repo,
    title: commit_message,
    head: branch_name,
    base: 'develop',
    body: 'This PR was created automatically by CI.'
  )
end

desc 'Run fastlane linting'
lane :rubocop do
  next unless is_check_required(sources: sources_matrix[:ruby])

  sh('bundle exec rubocop')
end

desc 'Remove UI snapshots'
private_lane :remove_snapshots do
  Dir.glob("../Tests/StreamChatUITests/**/__Snapshots__/**/*.png").select { |file| File.delete(file) }
end

lane :sources_matrix do
  {
    e2e: ['Sources', 'StreamChatUITestsAppUITests', 'StreamChatUITestsApp', 'TestTools/StreamChatTestMockServer'],
    unit: ['Sources', 'Tests/StreamChatTests', 'Tests/Shared', 'TestTools/StreamChatTestTools', xcode_project],
    ui: ['Sources', 'Tests/StreamChatUITests', 'Tests/Shared', xcode_project],
    emerge: ['Sources'],
    sample_apps: ['Sources', 'Examples', 'DemoApp', xcode_project],
    integration: ['Sources', 'Integration', xcode_project],
    ruby: ['fastlane', 'Gemfile', 'Gemfile.lock']
  }
end

private_lane :current_branch do
  ENV['BRANCH_NAME'] || git_branch
end
