default_platform :ios
skip_docs

require 'json'
require 'net/http'
import 'Sonarfile'
import 'Allurefile'

xcode_version = ENV['XCODE_VERSION'] || '15.2'
xcode_project = 'StreamChat.xcodeproj'
sdk_names = ['StreamChat', 'StreamChatUI']
github_repo = ENV['GITHUB_REPOSITORY'] || 'GetStream/stream-chat-swift'
stress_tests_cycles = 50
derived_data_path = 'derived_data'
source_packages_path = 'spm_cache'
performance_path = "performance/#{github_repo.split('/').last}.json"
buildcache_xcargs = 'CC=clang CPLUSPLUS=clang++ LD=clang LDPLUSPLUS=clang++'
testlab_bucket = 'gs://test-lab-af3rt9m4yh360-mqm1zzm767nhc'
is_localhost = !is_ci
@force_check = false

before_all do |lane|
  if is_ci
    setup_ci
    ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] = '180'
    ENV['FASTLANE_XCODEBUILD_SETTINGS_RETRIES'] = '10'
    xcversion(version: xcode_version) unless [:publish_release, :allure_launch, :allure_upload, :pod_lint, :sync_mock_server, :copyright].include?(lane)
  end
end

after_all do |lane|
  stop_sinatra if lane == :test_e2e_mock
end

desc "Build .xcframeworks"
lane :build_xcframeworks do
  match_me
  output_directory = "#{Dir.pwd}/../Products"
  team_id = File.read('Matchfile').match(/team_id\("(.*)"\)/)[1]
  codesign = ["codesign --timestamp -v --sign 'Apple Distribution: Stream.io Inc (#{team_id})'"]
  sdk_names.each do |sdk|
    create_xcframework(
      project: xcode_project,
      scheme: sdk,
      destinations: ['iOS'],
      include_BCSymbolMaps: true,
      include_debug_symbols: true,
      xcframework_output_directory: output_directory,
      remove_xcarchives: true
    )
    sh('../Scripts/removeUnneededSymbols.sh', sdk, output_directory)
    codesign << lane_context[SharedValues::XCFRAMEWORK_OUTPUT_PATH]
  end
  sh(codesign.join(' ')) # We need to sign all frameworks at once
end

desc 'Start a new release'
lane :release do |options|
  previous_version_number = last_git_tag
  artifacts_path = File.absolute_path('../StreamChatArtifacts.json')
  swift_environment_path = File.absolute_path('../Sources/StreamChat/Generated/SystemEnvironment+Version.swift')
  extra_changes = lambda do |release_version|
    # Set the framework version on the artifacts
    artifacts = JSON.parse(File.read(artifacts_path))
    artifacts[release_version.to_s] = "https://github.com/#{github_repo}/releases/download/#{release_version}/StreamChat-All.zip"
    File.write(artifacts_path, JSON.dump(artifacts))

    # Set the framework version in SystemEnvironment+Version.swift
    new_content = File.read(swift_environment_path).gsub!(previous_version_number, release_version)
    File.open(swift_environment_path, 'w') { |f| f.puts(new_content) }
  end

  pod_lint
  release_ios_sdk(
    version: options[:version],
    bump_type: options[:type],
    sdk_names: sdk_names,
    podspec_names: ['StreamChat', 'StreamChat-XCFramework', 'StreamChatUI', 'StreamChatUI-XCFramework'],
    github_repo: github_repo,
    extra_changes: extra_changes,
    create_pull_request: true
  )
end

desc 'Completes an SDK Release'
lane :publish_release do |options|
  xcversion(version: '14.0.1')

  clean_products
  build_xcframeworks
  compress_frameworks
  clean_products

  publish_ios_sdk(
    skip_git_status_check: false,
    version: options[:version],
    sdk_names: sdk_names,
    podspec_names: ['StreamChat', 'StreamChat-XCFramework', 'StreamChatUI', 'StreamChatUI-XCFramework'],
    github_repo: github_repo,
    upload_assets: ['Products/StreamChat.zip', 'Products/StreamChatUI.zip', 'Products/StreamChat-All.zip']
  )

  update_spm(version: options[:version])
end

lane :merge_release_to_main do
  ensure_git_status_clean
  sh('git checkout main')
  sh('git pull')

  # Grep all remote release branches and ensure there's only one
  release_branches = sh(command: 'git branch -a', log: false).delete(' ').split("\n").grep(%r(origin/.*release/))
  UI.user_error!("Expected 1 release branch, found #{release_branches.size}") if release_branches.size != 1

  # Merge release branch to main. For more info, read: https://notion.so/iOS-Branching-Strategy-37c10127dc26493e937769d44b1d6d9a
  sh("git merge #{release_branches.first} --ff-only")
  UI.user_error!('Not pushing changes') unless prompt(text: 'Will push changes. All looking good?', boolean: true)
  sh('git push')
  UI.important('Please, wait for the `Publish new release` workflow to pass on GitHub Actions: ' \
               "https://github.com/#{github_repo}/actions/workflows/publish-release.yml")
end

lane :merge_main_to_develop do
  ensure_git_status_clean
  sh('git checkout develop')
  sh('git pull')
  sh('git merge main')
  UI.user_error!('Not pushing changes') unless prompt(text: 'Will push changes. All looking good?', boolean: true)
  sh('git push')
end

desc 'Compresses the XCFrameworks into zip files'
lane :compress_frameworks do
  Dir.chdir('..') do
    FileUtils.cp('LICENSE', 'Products/LICENSE')
    Dir.chdir('Products') do
      ['StreamChat', 'StreamChatUI'].each do |framework|
        sh("zip -r #{framework} ./#{framework}.xcframework ./LICENSE")
        sh("swift package compute-checksum #{framework}.zip")
      end
      sh('zip -r "StreamChat-All" ./*.xcframework ./LICENSE')
    end
  end
end

desc 'Cleans Products and DerivedData folders'
lane :clean_products do
  Dir.chdir('..') do
    ['*.xcframework', '*.bundle', '*.BCSymbolMaps', '*.dSYMs', 'LICENSE'].each do |f|
      sh("rm -rf Products/#{f}") # FileUtils.rm_rf does not work from Makefile, using sh instead
    end
  end
end

desc 'Update XCFrameworks and submit to the SPM repository'
private_lane :update_spm do |options|
  version = options[:version] || ''
  UI.user_error!('You need to pass the version of the release you want to obtain the changelog from') unless version.length > 0

  # Generate Checksums
  stream_chat_checksum = sh('swift package compute-checksum ../Products/StreamChat.zip').strip
  stream_chat_ui_checksum = sh('swift package compute-checksum ../Products/StreamChatUI.zip').strip

  initial_directory = Dir.pwd

  # Update SPM Repo
  spm_directory_name = 'StreamSPM'
  spm_directory = "../../#{spm_directory_name}"
  sh("git clone git@github.com:#{github_repo}-spm.git ../../#{spm_directory_name}")
  Dir.chdir(spm_directory)

  result = sh('basename `git rev-parse --show-toplevel`').strip
  UI.error("Not using #{spm_directory_name} repo") unless result.to_s == spm_directory_name

  file_lines = File.readlines('Package.swift')
  file_data = ''
  previous_module = ''

  file_lines.each do |line|
    formatted_line =
      case previous_module
      when 'StreamChat'
        line.gsub(/(checksum: ")[a-z0-9]+(")/, "\\1#{stream_chat_checksum}\\2")
      when "StreamChatUI"
        line.gsub(/(checksum: ")[a-z0-9]+(")/, "\\1#{stream_chat_ui_checksum}\\2")
      else
        line
      end

    url_pattern = %r{(releases/download/)[.0-9]+(/)}
    if line.match(url_pattern)
      formatted_line = line.gsub(url_pattern, "\\1#{version}\\2")
      previous_module = line.match(/([a-zA-Z]+).zip/).to_s.gsub(/.zip/, '')
    end

    file_data << formatted_line
  end

  # Write the new changes
  File.open('./Package.swift', 'w') { |file| file << file_data }

  # Update the repo
  sh('git add -A')
  sh("git commit -m 'Bump #{version}'")
  sh('git push')

  github_release = set_github_release(
    repository_name: "#{github_repo}-spm",
    api_token: ENV.fetch('GITHUB_TOKEN', nil),
    name: version,
    tag_name: version,
    commitish: 'main',
    description: "https://github.com/#{github_repo}/releases/tag/#{version}"
  )

  UI.message("Moving back to fastlane's directory - #{initial_directory}")
  Dir.chdir(initial_directory)

  # Clean Up
  sh("rm -rf #{spm_directory}")
  UI.success("New SPM release available: #{github_release['html_url']}")
  github_release['html_url']
end

private_lane :appstore_api_key do
  @appstore_api_key ||= app_store_connect_api_key(
    key_id: 'MT3PRT8TB7',
    issuer_id: '69a6de96-0738-47e3-e053-5b8c7c11a4d1',
    key_content: ENV.fetch('APPSTORE_API_KEY', nil),
    in_house: false
  )
end

lane :pod_lint do
  # We don't lint StreamChatUI.podspec since pod lints it against StreamChat's remote version instead of local one
  pod_lib_lint(podspec: 'StreamChat.podspec', allow_warnings: true)
end

desc "If `readonly: true` (by default), installs all Certs and Profiles necessary for development and ad-hoc.\nIf `readonly: false`, recreates all Profiles necessary for development and ad-hoc, updates them locally and remotely."
lane :match_me do |options|
  app_identifiers = [
    'io.getstream.StreamChat',
    'io.stream.StreamChatUI',
    'io.getstream.iOS.ChatDemoApp',
    'io.getstream.iOS.ChatDemoAppTwo',
    'io.getstream.iOS.ChatDemoApp.DemoAppPush',
    'io.getstream.iOS.iMessageClone',
    'io.getstream.iOS.SlackClone',
    'io.getstream.iOS.MessengerClone',
    'io.getstream.iOS.YouTubeClone',
    'io.getstream.iOS.DemoAppUIKit',
    'io.getstream.iOS.ChatDemoApp.DemoShare',
    'io.getstream.iOS.StreamChatMockServer',
    'io.getstream.iOS.StreamChatUITestsApp',
    'io.getstream.iOS.StreamChatUITestsAppUITests.xctrunner'
  ]
  custom_match(
    api_key: appstore_api_key,
    app_identifier: app_identifiers,
    readonly: options[:readonly],
    register_device: options[:register_device]
  )
end

desc 'Builds the latest version of Demo app and uploads it to TestFlight'
lane :uikit_testflight_build do
  match_me
  testflight_build(
    api_key: appstore_api_key,
    xcode_project: xcode_project,
    sdk_target: 'StreamChat',
    app_target: 'DemoApp',
    app_identifier: 'io.getstream.iOS.ChatDemoApp',
    extensions: ['DemoShare']
  )
end

desc 'Get next PR number from github to be used in CHANGELOG'
lane :get_next_issue_number do
  result = github_api(api_token: ENV.fetch('FASTLANE_GITHUB_TOKEN', nil), path: "/repos/#{github_repo}/issues")

  next_issue_number = result[:json][0]['number'] + 1
  next_issue_link = "[##{next_issue_number}](https://github.com/#{github_repo}/issues/#{next_issue_number})"

  clipboard(value: next_issue_link)

  UI.success("The next PR / Issue will have number: #{next_issue_number}")
  UI.success("So the next markdown link is: #{next_issue_link}")
  UI.success('Next markdown link is copied to your clipboard! ⬆️')
end

desc 'Runs tests in Debug config'
lane :test do |options|
  next unless is_check_required(sources: sources_matrix[:unit], force_check: @force_check)

  update_testplan_on_ci(path: 'Tests/StreamChatTests/StreamChatFlakyTests.xctestplan')

  scan(
    project: xcode_project,
    scheme: 'StreamChat',
    testplan: 'StreamChatFlakyTests',
    clean: is_localhost,
    derived_data_path: derived_data_path,
    cloned_source_packages_path: source_packages_path,
    devices: options[:device],
    number_of_retries: 5,
    build_for_testing: options[:build_for_testing],
    skip_build: options[:skip_build],
    xcargs: buildcache_xcargs
  )

  next if options[:build_for_testing]

  update_testplan_on_ci(path: 'Tests/StreamChatTests/StreamChatTestPlan.xctestplan')

  scan(
    project: xcode_project,
    scheme: 'StreamChat',
    testplan: 'StreamChatTestPlan',
    derived_data_path: derived_data_path,
    cloned_source_packages_path: source_packages_path,
    devices: options[:device],
    skip_build: true,
    xcargs: buildcache_xcargs,
    number_of_retries: options[:cron] ? 3 : nil
  )
end

desc 'Starts Sinatra web server'
lane :start_sinatra do
  sh('bundle exec ruby sinatra.rb > sinatra_log.txt 2>&1 &')
end

desc 'Stops Sinatra web server'
lane :stop_sinatra do
  sh('lsof -t -i:4567 | xargs kill -9')
end

lane :build_test_app_and_frameworks do
  scan(
    project: xcode_project,
    scheme: 'StreamChatUITestsApp',
    testplan: 'StreamChatUITestsApp',
    result_bundle: true,
    derived_data_path: derived_data_path,
    cloned_source_packages_path: source_packages_path,
    clean: is_localhost,
    build_for_testing: true,
    xcargs: buildcache_xcargs
  )
end

lane :xcmetrics do |options|
  next unless is_check_required(sources: sources_matrix[:xcmetrics], force_check: @force_check)

  ['test_output/', 'performance/', "../#{derived_data_path}/Build/Products"].each { |dir| FileUtils.remove_dir(dir, force: true) }

  match_me

  scan(
    project: xcode_project,
    scheme: 'StreamChatUITestsApp',
    testplan: 'Performance',
    result_bundle: true,
    derived_data_path: derived_data_path,
    cloned_source_packages_path: source_packages_path,
    clean: is_localhost,
    xcargs: buildcache_xcargs,
    sdk: 'iphoneos',
    skip_detect_devices: true,
    build_for_testing: true
  )

  firebase_error = ''
  xcodebuild_output = ''
  Dir.chdir("../#{derived_data_path}/Build/Products") do
    begin
      sh("zip -r MyTests.zip .")
      sh("gcloud firebase test ios run --test MyTests.zip --timeout 7m --results-dir test_output --device 'model=iphone14pro,version=16.6,orientation=portrait'")
    rescue StandardError => e
      UI.error("Test failed on Firebase:\n#{e}")
      firebase_error = e
    end

    sh("gsutil cp -r #{testlab_bucket}/test_output/iphone14pro-16.6-en-portrait/xcodebuild_output.log xcodebuild_output.log")
    xcodebuild_output = File.read('xcodebuild_output.log')
  end

  sh("git clone git@github.com:GetStream/stream-swift-performance-benchmarks.git #{File.dirname(performance_path)}")
  branch_performance = xcmetrics_log_parser(log: xcodebuild_output)
  performance_benchmarks = JSON.parse(File.read(performance_path))
  expected_performance = performance_benchmarks['benchmark']

  markdown_table = "## StreamChat XCMetrics\n| `target` | `metric` | `benchmark` | `branch` | `performance` | `status` |\n| - | - | - | - | - | - |\n"
  ['testMessageListScrollTime', 'testChannelListScrollTime'].each do |test_name|
    index = 0
    ['hitches_total_duration', 'duration', 'hitch_time_ratio', 'frame_rate', 'number_of_hitches'].each do |metric|
      benchmark_value = expected_performance[test_name][metric]['value']
      branch_value = branch_performance[test_name][metric]['value']
      value_extension = branch_performance[test_name][metric]['ext']

      max_stddev = 0.1 # Default Xcode Max STDDEV is 10%
      status_emoji =
        if branch_value > benchmark_value && branch_value < benchmark_value + (benchmark_value * max_stddev)
          '🟡' # Warning if a branch is 10% less performant than the benchmark
        elsif branch_value > benchmark_value
          '🔴' # Failure if a branch is more than 10% less performant than the benchmark
        else
          '🟢' # Success if a branch is more performant or equals to the benchmark
        end

      benchmark_value_avoids_zero_division = benchmark_value == 0 ? 1 : benchmark_value
      diff = ((benchmark_value - branch_value) * 100.0 / benchmark_value_avoids_zero_division).round(2)
      diff_emoji = diff > 0 ? '🔼' : '🔽'

      title = metric.to_s.gsub('_', ' ').capitalize
      target = index.zero? ? test_name.match(/(?<=test)(.*?)(?=ScrollTime)/).to_s : ''
      index += 1

      markdown_table << "| #{target} | #{title} | #{benchmark_value} #{value_extension} | #{branch_value} #{value_extension} | #{diff}% #{diff_emoji} | #{status_emoji} |\n"
      FastlaneCore::PrintTable.print_values(
        title: "⏳ #{title} ⏳",
        config: {
          benchmark: "#{benchmark_value} #{value_extension}",
          branch: "#{branch_value} #{value_extension}",
          diff: "#{diff}% #{diff_emoji}",
          status: status_emoji
        }
      )
    end
  end

  UI.user_error!("See Firebase error above ☝️") unless firebase_error.to_s.empty?

  if is_ci
    pr_comment_required = ENV.key?('GITHUB_PR_NUM')
    performance_benchmarks[current_branch] = branch_performance
    UI.message("Performance benchmarks: #{performance_benchmarks}")
    File.write(performance_path, JSON.pretty_generate(performance_benchmarks))

    Dir.chdir(File.dirname(performance_path)) do
      if sh('git status -s', log: false).to_s.empty?
        pr_comment_required = false
        UI.important('No changes in performance benchmarks. Skipping commit and comment.')
      else
        sh('git add -A')
        sh("git commit -m 'Update #{github_repo.split('/').last}.json: #{current_branch}'")
        sh('git push')
      end
    end

    sh("gh pr comment #{ENV.fetch('GITHUB_PR_NUM')} -b '#{markdown_table}'") if pr_comment_required
  end

  UI.user_error!('Performance benchmark failed.') if markdown_table.include?('🔴')
end

private_lane :xcmetrics_log_parser do |options|
  log = options[:log]
  method = 'Scroll_DraggingAndDeceleration'
  metrics = {}

  ['testMessageListScrollTime', 'testChannelListScrollTime'].each do |test_name|
    hitches_total_duration = log.match(/#{test_name}\]' measured \[Hitches Total Duration \(#{method}\), ms\] average: (\d+\.\d+)/)
    duration = log.match(/#{test_name}\]' measured \[Duration \(#{method}\), s\] average: (\d+\.\d+)/)
    hitch_time_ratio = log.match(/#{test_name}\]' measured \[Hitch Time Ratio \(#{method}\), ms per s\] average: (\d+\.\d+)/)
    frame_rate = log.match(/#{test_name}\]' measured \[Frame Rate \(#{method}\), fps\] average: (\d+\.\d+)/)
    number_of_hitches = log.match(/#{test_name}\]' measured \[Number of Hitches \(#{method}\), hitches\] average: (\d+\.\d+)/)

    metrics[test_name] = {
      'hitches_total_duration' => {
        'value' => hitches_total_duration ? hitches_total_duration[1].to_f.round(2) : '?',
        'ext' => 'ms'
      },
      'duration' => {
        'value' => duration ? duration[1].to_f.round(2) : '?',
        'ext' => 's'
      },
      'hitch_time_ratio' => {
        'value' => hitch_time_ratio ? hitch_time_ratio[1].to_f.round(2) : '?',
        'ext' => 'ms per s'
      },
      'frame_rate' => {
        'value' => frame_rate ? frame_rate[1].to_f.round(2) : '?',
        'ext' => 'fps'
      },
      'number_of_hitches' => {
        'value' => number_of_hitches ? number_of_hitches[1].to_f.round(2) : '?',
        'ext' => ''
      }
    }
  end

  metrics
end

desc 'Runs e2e ui tests using mock server in Debug config'
lane :test_e2e_mock do |options|
  next unless is_check_required(sources: sources_matrix[:e2e], force_check: @force_check)

  start_sinatra

  scan_options = {
    project: xcode_project,
    scheme: 'StreamChatUITestsApp',
    testplan: 'StreamChatUITestsApp',
    result_bundle: true,
    derived_data_path: derived_data_path,
    cloned_source_packages_path: source_packages_path,
    clean: is_localhost,
    test_without_building: options[:cron] && options[:device].include?('17.') ? nil : options[:test_without_building],
    xcargs: buildcache_xcargs,
    devices: options[:device],
    prelaunch_simulator: is_ci,
    number_of_retries: 3 # TODO: CIS-1737
  }

  if is_localhost || options[:cron]
    scan(scan_options)
  else
    parallelize_tests_on_ci(scan: scan_options, batch: options[:batch])
  end
end

private_lane :parallelize_tests_on_ci do |options|
  products_dir = File.expand_path("../#{derived_data_path}/Build/Products")
  xctestrun = Dir.glob(File.expand_path("#{products_dir}/*.xctestrun")).first
  tests = retrieve_xctest_names(xctestrun: xctestrun).values.flatten
  slice_size = (tests.size / ENV['MATRIX_SIZE'].to_f).ceil
  only_testing = []
  tests.each_slice(slice_size) { |test| only_testing << test }
  only_testing_batch = only_testing[options[:batch].to_i]

  UI.success("Tests in total: #{only_testing.flatten.size}. Running #{only_testing_batch.size} of them ⌛️")
  scan(options[:scan].merge(only_testing: only_testing_batch))
end

desc 'Runs ui tests in Debug config'
lane :test_ui do |options|
  next unless is_check_required(sources: sources_matrix[:ui], force_check: @force_check)

  record_mode = !options[:record].to_s.empty?
  remove_snapshots if record_mode

  update_testplan_on_ci(path: 'Tests/StreamChatUITests/StreamChatUITestPlan.xctestplan')

  scan(
    project: xcode_project,
    scheme: 'StreamChatUI',
    testplan: 'StreamChatUITestPlan',
    clean: is_localhost,
    derived_data_path: derived_data_path,
    cloned_source_packages_path: source_packages_path,
    build_for_testing: options[:build_for_testing],
    skip_build: options[:skip_build],
    result_bundle: true,
    devices: options[:device],
    xcargs: buildcache_xcargs,
    fail_build: !record_mode
  )

  if record_mode && is_ci
    png_files = git_status(ext: '.png').map { |_, png| png }.flatten
    next if png_files.empty?

    # Discard all files apart from the snapshots
    png_files.each { |png| sh("git add #{png}") || true }
    sh('git restore .')

    create_pr(
      title: '[CI] Snapshots',
      base_branch: current_branch,
      head_branch: "#{current_branch}-snapshots"
    )
  end
end

private_lane :match_macos do
  %w[development appstore].each do |type|
    match(
      type: type,
      app_identifier: 'io.getstream.StreamChat',
      platform: 'macos'
    )
  end
end

desc 'Runs stress tests for Debug config'
lane :stress_test do
  scan(
    project: xcode_project,
    scheme: 'StreamChat',
    clean: true,
    build_for_testing: true,
    devices: options[:device]
  )

  update_testplan_on_ci(path: 'Tests/StreamChatTests/StreamChatStressTestPlan.xctestplan')

  stress_tests_cycles.times do
    scan(
      project: xcode_project,
      scheme: 'StreamChat',
      test_without_building: true,
      testplan: 'StreamChatStressTestPlan',
      devices: options[:device],
      xcpretty_args: '--test' # simplify logs
    )
  end
end

desc 'Builds Demo app'
lane :build_demo do |options|
  options[:scheme] = 'DemoApp'
  build_example_app(options)
end

desc 'Builds iMessageClone app'
lane :build_imessage_clone do |options|
  options[:scheme] = 'iMessage'
  build_example_app(options)
end

desc 'Builds SlackClone app'
lane :build_slack_clone do |options|
  options[:scheme] = 'Slack'
  build_example_app(options)
end

desc 'Builds MessengerClone app'
lane :build_messenger_clone do |options|
  options[:scheme] = 'Messenger'
  build_example_app(options)
end

desc 'Builds YouTubeClone app'
lane :build_youtube_clone do |options|
  options[:scheme] = 'YouTube'
  build_example_app(options)
end

private_lane :build_example_app do |options|
  next unless is_check_required(sources: sources_matrix[:sample_apps], force_check: @force_check)

  scan(
    project: xcode_project,
    scheme: options[:scheme],
    clean: is_localhost,
    derived_data_path: derived_data_path,
    cloned_source_packages_path: source_packages_path,
    build_for_testing: true,
    devices: options[:device],
    xcargs: buildcache_xcargs
  )
end

desc 'Test SPM Integration'
lane :spm_integration do
  next unless is_check_required(sources: sources_matrix[:integration], force_check: @force_check)

  gym(
    project: 'Integration/SPM/SwiftPackageManager.xcodeproj',
    scheme: 'SwiftPackageManager',
    skip_package_ipa: true,
    skip_archive: true,
    clean: is_localhost,
    derived_data_path: derived_data_path,
    cloned_source_packages_path: source_packages_path,
    destination: 'generic/platform=iOS Simulator',
    xcargs: buildcache_xcargs
  )
end

desc 'Test CocoaPods Integration'
lane :cocoapods_integration do
  next unless is_check_required(sources: sources_matrix[:integration], force_check: @force_check)

  cocoapods(
    clean_install: true,
    podfile: 'Integration/CocoaPods/'
  )

  gym(
    workspace: 'Integration/CocoaPods/CocoaPods.xcworkspace',
    scheme: 'CocoaPods',
    skip_package_ipa: true,
    skip_archive: true,
    clean: is_localhost,
    derived_data_path: derived_data_path,
    cloned_source_packages_path: source_packages_path,
    destination: 'generic/platform=iOS Simulator',
    xcargs: buildcache_xcargs
  )
end

private_lane :update_testplan_on_ci do |options|
  update_testplan(path: options[:path], env_vars: { key: 'CI', value: 'TRUE' }) if is_ci
end

lane :sync_mock_server do
  sh('python3 sync_mock_server.py')
  next unless is_ci

  create_pr(
    title: '[CI] Sync Mock Server',
    head_branch: "ci/sync-mock-server-#{Time.now.to_i}"
  )
end

desc 'Run fastlane linting'
lane :rubocop do
  next unless is_check_required(sources: sources_matrix[:ruby], force_check: @force_check)

  sh('bundle exec rubocop')
end

lane :install_sim do |options|
  xcode_install_cache_dir = File.expand_path('~/Library/Caches/XcodeInstall')
  sim_dmg_path = Dir["#{xcode_install_cache_dir}/*.dmg"].first
  sim_pkg_path = Dir["#{xcode_install_cache_dir}/*.pkg"].first
  if is_localhost || sim_dmg_path.nil? || sim_pkg_path.nil?
    sh("bundle exec xcversion simulators --install='iOS #{options[:ios]}'")
  else
    sh("hdiutil attach '#{sim_dmg_path}'")
    sh("sudo installer -pkg '#{sim_pkg_path}' -target /")
    mount_point = sh("hdiutil attach '#{sim_dmg_path}' | grep Volumes | cut -f 3").strip
    sh("hdiutil detach '#{mount_point}'")
  end
end

desc 'Remove UI snapshots'
private_lane :remove_snapshots do |options|
  snapshots_path = "../Tests/StreamChatUITests/**/__Snapshots__/**/*.png"
  if options[:only_unchanged]
    pnf_files = git_status(ext: '.png')
    changed_snapshots = (pnf_files[:a] + pnf_files[:m]).map { |f| File.expand_path(f) }
    Dir.glob(snapshots_path).select { |f| File.delete(f) unless changed_snapshots.include?(File.expand_path(f)) }
  else
    Dir.glob(snapshots_path).select { |f| File.delete(f) }
  end
end

lane :sources_matrix do
  {
    e2e: ['Sources', 'StreamChatUITestsAppUITests', 'StreamChatUITestsApp', 'TestTools/StreamChatTestMockServer', xcode_project],
    unit: ['Sources', 'Tests/StreamChatTests', 'Tests/Shared', 'TestTools/StreamChatTestTools', xcode_project],
    ui: ['Sources', 'Tests/StreamChatUITests', 'Tests/Shared', xcode_project],
    sample_apps: ['Sources', 'Examples', 'DemoApp', xcode_project],
    integration: ['Sources', 'Integration', xcode_project],
    ruby: ['fastlane', 'Gemfile', 'Gemfile.lock'],
    xcmetrics: ['Sources']
  }
end

lane :copyright do
  update_copyright(ignore: [derived_data_path, source_packages_path, 'vendor/'])
  next unless is_ci

  create_pr(
    title: '[CI] Update Copyright',
    head_branch: "ci/update-copyright-#{Time.now.to_i}"
  )
end

private_lane :create_pr do |options|
  options[:base_branch] ||= 'develop'
  sh("git checkout -b #{options[:head_branch]}")
  sh('git restore Brewfile.lock.json || true')
  sh('git add -A')
  sh("git commit -m '#{options[:title]}'")
  push_to_git_remote(tags: false)

  create_pull_request(
    api_token: ENV.fetch('GITHUB_TOKEN', nil),
    repo: github_repo,
    title: options[:title],
    head: options[:head_branch],
    base: options[:base_branch],
    body: 'This PR was created automatically by CI.'
  )
end

private_lane :current_branch do
  github_pr_branch_name = ENV['BRANCH_NAME'].to_s
  github_ref_branch_name = ENV['GITHUB_REF'].to_s.sub('refs/heads/', '')
  fastlane_branch_name = git_branch

  branch_name = if !github_pr_branch_name.empty?
                  github_pr_branch_name
                elsif !fastlane_branch_name.empty?
                  fastlane_branch_name
                elsif !github_ref_branch_name.empty?
                  github_ref_branch_name
                end

  UI.important("Current branch: #{branch_name} 🕊️")
  branch_name
end

private_lane :git_status do |options|
  UI.user_error!('Extension should be provided') unless options[:ext]

  untracked_files = sh('git status -s', log: false).split("\n").map(&:strip)
  UI.important("Git Status: #{untracked_files}")

  deleted_files = select_files_from(files: untracked_files, with_extension: options[:ext], that_start_with: 'D')
  added_files = select_files_from(files: untracked_files, with_extension: options[:ext], that_start_with: ['A', '??'])
  renamed_files = select_files_from(files: untracked_files, with_extension: options[:ext], that_start_with: 'R')
  modified_files = select_files_from(files: untracked_files, with_extension: options[:ext], that_start_with: 'M')

  renamed_files.each do |renamed_file|
    content = renamed_file.split.drop(1).join.split('->').map(&:strip)
    deleted_files << content.first
    added_files << content.last
  end
  { a: added_files, d: deleted_files, m: modified_files }
end

def select_files_from(files:, with_extension:, that_start_with:)
  files.select do |f|
    f.start_with?(*that_start_with)
  end.map do |f|
    f.split.drop(1).join(' ')
  end.select do |f|
    f.gsub(/['"]/, '').end_with?(with_extension)
  end
end
