//
// Copyright Â© 2020 Stream.io Inc. All rights reserved.
//

import Foundation

/// An `AttachmentPayload` represents an object describing attachment data that is received from backend.
struct AttachmentPayload<ExtraData: AttachmentExtraData>: Decodable {
    private enum CodingKeys: String, CodingKey {
        case title
        case author = "author_name"
        case text
        case type
        case image
        case url
        case name
        case titleLink = "title_link"
        case thumbURL = "thumb_url"
        case fallback
        case imageURL = "image_url"
        case assetURL = "asset_url"
        case ogURL = "og_scrape_url"
        case actions
    }
    
    /// A title for the attachment.
    let title: String
    /// An author generated by backend after enriching URL. (e.g `YouTube`)
    let author: String?
    /// A description text.
    let text: String?
    /// A type (see `AttachmentType`).
    let type: AttachmentType
    /// Actions from a command (see `Action`, `Command`).
    let actions: [AttachmentAction]
    /// A URL. Depends on type of the attachment (e.g. some asset URL, enriched URL, tappable title URL)
    let url: URL?
    /// An image URL.
    let imageURL: URL?
    /// An image preview URL.
    let imagePreviewURL: URL?
    /// A file description (see `AttachmentFile`).
    let file: AttachmentFile?
    /// An extra data for the attachment.
    let extraData: ExtraData
    
    /// Init an attachment.
    ///
    /// - Parameters:
    ///   - type: an attachment type.
    ///   - title: a title.
    ///   - url: an url.
    ///   - imageURL: an preview image url.
    ///   - file: a file description.
    ///   - extraData: an extra data.
    init(
        type: AttachmentType,
        title: String,
        url: URL? = nil,
        imageURL: URL? = nil,
        imagePreviewURL: URL?,
        file: AttachmentFile? = nil,
        extraData: ExtraData = .defaultValue
    ) {
        self.type = type
        self.url = url
        self.imageURL = imageURL
        self.imagePreviewURL = imagePreviewURL
        self.title = title
        self.file = file
        self.extraData = extraData
        text = nil
        author = nil
        actions = []
    }
    
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        let author = try container.decodeIfPresent(String.self, forKey: .author)
        self.author = author
        text = try container.decodeIfPresent(String.self, forKey: .text)?.trimmingCharacters(in: .whitespacesAndNewlines)
        
        title = (
            try container.decodeIfPresent(String.self, forKey: .title)
                ?? container.decodeIfPresent(String.self, forKey: .fallback)
                ?? container.decodeIfPresent(String.self, forKey: .name)
                ?? ""
        ).trimmingCharacters(in: .whitespacesAndNewlines)
        
        // Parse imageURL.
        imageURL = AttachmentPayload.fixedURL(
            try container.decodeIfPresent(String.self, forKey: .image)
                ?? container.decodeIfPresent(String.self, forKey: .imageURL)
                ?? container.decodeIfPresent(String.self, forKey: .thumbURL)
        )

        imagePreviewURL = AttachmentPayload.fixedURL(
            try container.decodeIfPresent(String.self, forKey: .thumbURL)
        )
        
        // Parse URL.
        url = AttachmentPayload.fixedURL(
            try container.decodeIfPresent(String.self, forKey: .assetURL)
                ?? container.decodeIfPresent(String.self, forKey: .url)
                ?? container.decodeIfPresent(String.self, forKey: .titleLink)
                ?? container.decodeIfPresent(String.self, forKey: .ogURL)
        )

        let type: AttachmentType
        let itWasLinkOriginally = container.contains(.ogURL)
        if itWasLinkOriginally {
            type = .link
        } else {
            type = AttachmentType(rawValue: try? container.decode(String.self, forKey: .type))
        }
        // compiler is confused by expression unless we use helper variable for type
        self.type = type

        file = (type == .file || type == .video) ? try AttachmentFile(from: decoder) : nil
        actions = try container.decodeIfPresent([AttachmentAction].self, forKey: .actions) ?? []
        extraData = try .init(from: decoder)
    }
    
    /// Helper function to unify URL format for links coming from backend.
    private static func fixedURL(_ urlString: String?) -> URL? {
        guard let string = urlString else {
            return nil
        }
        
        var urlString = string
        
        if urlString.hasPrefix("//") {
            urlString = "https:\(urlString)"
        }
        
        if !urlString.lowercased().hasPrefix("http") {
            urlString = "https://\(urlString)"
        }
        
        return URL(string: urlString)
    }
}
